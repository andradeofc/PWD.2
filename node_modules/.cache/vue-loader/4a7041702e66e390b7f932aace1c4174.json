{"remainingRequest":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\vue-window-modal\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\vue-window-modal\\index.vue","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Andrade\\Documents\\ProjetoDevWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n.vue-window-modal {\n    position: fixed;\n    background-color: #f7f7f7;\n    box-shadow: 7px 7px 50px 5px rgba(0,0,0,0.13);\n    border: 1px solid #8080802b;\n    border-radius: 3px;\n    display: none;\n    max-height: 90vh;\n    max-width: 90vw;\n}\n\n.vue-window-modal .vue-window-modal-header {\n    background-color: #585858;\n    padding: 5px;\n    padding-left: 8px;\n    padding-right: 8px;\n    border-top-left-radius: 3px;\n    border-top-right-radius: 3px;\n    color: white;\n    height: 40px;\n    font-size: 16px;\n    cursor: -webkit-grab;\n    user-select: none;\n    font-weight: bold;\n}\n\n.vue-window-modal .vue-window-modal-header h2 {\n    display: inline-block;\n    position: relative;\n    top: 3px;\n}\n\n.vue-window-modal .vue-window-modal-header img {\n    float: right;\n    cursor: pointer;\n    position: relative;\n    top: 6px;\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vue-window-modal","sourcesContent":["<style>\r\n    .vue-window-modal {\r\n        position: fixed;\r\n        background-color: #f7f7f7;\r\n        box-shadow: 7px 7px 50px 5px rgba(0,0,0,0.13);\r\n        border: 1px solid #8080802b;\r\n        border-radius: 3px;\r\n        display: none;\r\n        max-height: 90vh;\r\n        max-width: 90vw;\r\n    }\r\n\r\n    .vue-window-modal .vue-window-modal-header {\r\n        background-color: #585858;\r\n        padding: 5px;\r\n        padding-left: 8px;\r\n        padding-right: 8px;\r\n        border-top-left-radius: 3px;\r\n        border-top-right-radius: 3px;\r\n        color: white;\r\n        height: 40px;\r\n        font-size: 16px;\r\n        cursor: -webkit-grab;\r\n        user-select: none;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .vue-window-modal .vue-window-modal-header h2 {\r\n        display: inline-block;\r\n        position: relative;\r\n        top: 3px;\r\n    }\r\n\r\n    .vue-window-modal .vue-window-modal-header img {\r\n        float: right;\r\n        cursor: pointer;\r\n        position: relative;\r\n        top: 6px;\r\n    }\r\n</style>\r\n\r\n<template>\r\n    <div\r\n        :id=\"windowId\"\r\n        class=\"vue-window-modal\"\r\n        :style=\"{width, height, backgroundColor}\">\r\n        <div :id=\"windowId + '-' + 'header'\" class=\"vue-window-modal-header\">\r\n            <h2>{{title}}</h2>\r\n            <img src=\"./close.png\" @click=\"$emit('clickClose')\">\r\n        </div>\r\n        <slot name=\"default\"></slot>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: 'vue-window-modal',\r\n        data() {\r\n            return {\r\n                windowId: (function(){\r\n                    const one = Math.floor((Math.random() * 1000000) + 1) + ''\r\n                    const two = Math.floor((Math.random() * 1000000) + 1) + ''\r\n                    const three = Math.floor((Math.random() * 1000000) + 1) + ''\r\n                    return  one + two + three\r\n                })()\r\n            }\r\n        },\r\n        props: {\r\n            active: Boolean,\r\n            title: String,\r\n            width: {\r\n                type: String,\r\n                default: '600px'\r\n            },\r\n            height: {\r\n                type: String,\r\n                default: '600px'\r\n            },\r\n            backgroundColor: {\r\n                type: String,\r\n                default: '#f2f2f2'\r\n            }\r\n        },\r\n        methods: {\r\n            getThisWindowAndHeaderElements() {\r\n                return {\r\n                    window: window.document.getElementById(this.windowId),\r\n                    windowHeader: window.document.getElementById(this.windowId + '-' + 'header')\r\n                }\r\n            },\r\n            dragElement(elmnt) {\r\n\r\n                var context = this\r\n\r\n                var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\r\n\r\n                const _window = this.getThisWindowAndHeaderElements().window\r\n                const _windowHeader = this.getThisWindowAndHeaderElements().windowHeader\r\n\r\n                _windowHeader.onmousedown = dragMouseDown\r\n\r\n                function dragMouseDown(e) {\r\n                    e = e || window.event;\r\n                    // get the mouse cursor position at startup:\r\n                    pos3 = e.clientX;\r\n                    pos4 = e.clientY;\r\n                    document.onmouseup = closeDragElement;\r\n                    // call a function whenever the cursor moves:\r\n                    document.onmousemove = elementDrag;\r\n                    _windowHeader.style.cursor = '-webkit-grabbing'\r\n                }\r\n\r\n                function elementDrag(e) {\r\n                    e = e || window.event;\r\n                    // calculate the new cursor position:\r\n                    pos1 = pos3 - e.clientX;\r\n                    pos2 = pos4 - e.clientY;\r\n                    pos3 = e.clientX;\r\n                    pos4 = e.clientY;\r\n                    // set the element's new position:\r\n\r\n                    if (_window.offsetTop < (window.innerHeight - 35)) {\r\n                        _window.style.top = (_window.offsetTop - pos2) + \"px\";\r\n                    } else context.centerWindow()\r\n                    if (_window.offsetLeft < (window.innerWidth - 35)) {\r\n                        _window.style.left = (_window.offsetLeft - pos1) + \"px\";\r\n                    } else context.centerWindow()\r\n\r\n                }\r\n\r\n                function closeDragElement() {\r\n                    /* stop moving when mouse button is released:*/\r\n                    document.onmouseup = null;\r\n                    document.onmousemove = null;\r\n                    _windowHeader.style.cursor = '-webkit-grab'\r\n                }\r\n            },\r\n            getHighestWindow() {\r\n                const windows = Array.from(window.document.getElementsByClassName('vue-window-modal'))\r\n                const zIndexs = windows.map(el => Number(el.style.zIndex))\r\n                const highest = Math.max.apply(Math, zIndexs)\r\n                return highest\r\n            },\r\n            sendWindowToHighest() {\r\n                this.getThisWindowAndHeaderElements().window.style.zIndex = this.getHighestWindow() + 1\r\n            },\r\n            centerWindow() {\r\n                var myElement = this.getThisWindowAndHeaderElements().window,\r\n                    pageWidth = window.innerWidth,\r\n                    pageHeight = window.innerHeight,\r\n                    myElementWidth = myElement.offsetWidth,\r\n                    myElementHeight = myElement.offsetHeight;\r\n                const diff = this.activeWindows() * 20\r\n                myElement.style.top = (pageHeight / 2) - (myElementHeight / 2) + diff + \"px\";\r\n                myElement.style.left = (pageWidth / 2) - (myElementWidth / 2) + diff + \"px\";\r\n            },\r\n            checkTheresIsAnyAnotherCenteredWindow() { // not being used anymore but working well...\r\n                const windows = Array.from(window.document.getElementsByClassName('vue-window-modal'))\r\n                const centeredWindows = windows.filter(el => {\r\n                    var myElement = el,\r\n                        pageWidth = window.innerWidth,\r\n                        pageHeight = window.innerHeight,\r\n                        myElementWidth = myElement.offsetWidth,\r\n                        myElementHeight = myElement.offsetHeight;\r\n\r\n                    return el.style.top === (pageHeight / 2) - (myElementHeight / 2) + \"px\" &&\r\n                           el.style.left === (pageWidth / 2) - (myElementWidth / 2) + \"px\"\r\n                })\r\n                return centeredWindows\r\n            },\r\n            activeWindows() {\r\n                const windows = Array.from(window.document.getElementsByClassName('vue-window-modal'))\r\n                const openedWindows = windows.filter(el => {\r\n                    return el.style.display === 'block'\r\n                })\r\n                return openedWindows.length\r\n            },\r\n            hide() {\r\n                this.getThisWindowAndHeaderElements().window.style.display = 'none'\r\n            },\r\n            show() {\r\n                this.getThisWindowAndHeaderElements().window.style.display = 'block'\r\n            }\r\n        },\r\n        watch: {\r\n            active (newValue) {\r\n                if (newValue) {\r\n                    this.show()\r\n                    this.sendWindowToHighest()\r\n                    this.centerWindow()\r\n                } else {\r\n                    this.hide()\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            this.dragElement()\r\n            this.getThisWindowAndHeaderElements().window.addEventListener('click', () => {\r\n                this.sendWindowToHighest()\r\n            })\r\n            this.getThisWindowAndHeaderElements().window.style.zIndex = 9999\r\n        }\r\n    }\r\n\r\n</script>\r\n"]}]}